=========================
=== CPU Specification ===
=========================

=== Overview ===
A custom 8-bit CPU with a 16-bit register architecture, supporting basic arithmetic, logic, memory, and control flow instructions. The ALU uses combinational logic, and the instruction set is designed for compact encoding with variable-length instructions (2-3 bytes).

=== Instructions ===
0x0: 		ADD^		reg, imm8/reg		-> reg = reg + imm8/reg
0x1: 		SUB^		reg, imm8/reg		-> reg  = reg - imm8/reg
0x2: 		CMP		reg, imm8/reg		-> fg = compare reg with imm8/reg  
0x3: 		SBB^		reg, imm8/reg		-> reg = reg - imm8/reg - b    
0x4: 		XOR		reg, imm8/reg		-> reg = reg ^ imm8/reg  
0x5: 		NOR		reg, imm8/reg		-> reg = ~(reg | imm8/reg)   
0x6: 		MOV		reg, imm8/reg		-> reg = imm8/reg 
0x7: 		LDR		reg, [imm16/reg]	-> reg = [imm16/reg]  
0x8: 		STR		[imm16/reg], reg	-> [imm16/reg] = reg    
0x9: 		JNZ		imm16/reg		-> IP = imm16/reg if flag Z == 0 else NOP
0xA: 		ADC^		reg, imm8/reg		-> reg = reg + imm8/reg + c  
0xB: 		LEA		reg, imm16/reg	-> reg = imm16/reg    
0xC/0b11001: 	(SHL/SHR)^	reg 			-> reg = reg (<< / >>) 1  
0xD: 		PUSHF		imm8/reg		-> fg  = imm8/reg  
0xE: 		PUSH		imm8/reg		-> [SP--] = imm8/reg     
0xF/0b11111: 	POP/POPF	reg			-> reg = [++SP]/fg    



^: The instruction marked with this symbol are affected or affect the carry flag, if they
are not marked with this symbol they will not affect in any way this flag.
*CMP instruction only affect the E,L,Z flags.
*POP Instruction with reg argument works as POPF: reg, fg	-> reg = fg
*SHL Instruction with reg argument works as SHR: reg		-> reg = reg >> 1
*Only LEA will affect the 16 bits of the register, all the other instructions will affect the LSB.
*Instructions that use an imm16 as argument will use the 16 bits of the register if the argument is a register.
*Only the AL operations affect the zero flag.
*JNZ can be used as LNZ(reg = imm16/reg if Z == 0 else NOP).
*LEA can be used as JMP if the dst reg is IP.

=== Registers ===
8  16 bit registers (in the VHDL code is shown as 16*8b registers, made to make the XST happy, it have two reg arch)
									BYTE_SEL|	REG_SEL	
	R0 		(0x0) : GP register 		(LSB 0 reg) 	0		000
	R1		(0x1) : GP register 		(LSB 1 reg) 	0		001
	R2		(0x2) : GP register 		(LSB 2 reg) 	0		010
	R3		(0x3) : GP register 		(LSB 3 reg) 	0		011
	R4		(0x4) : GP register 		(LSB 4 reg) 	0		100
	R5		(0x5) : GP register 		(LSB 5 reg) 	0		101
	IP		(0x6) : Instruction Pointer  	(LSB 6 reg)     X		110
	SP		(0x7) : Stack Pointer		(7 reg)	    	X		111

*+1 extra FG register, it can be retrieved or changed with POPF and PUSHF.
*Calling convention
	*R0-R5, SP, IP, 0x00, 0x0000, [16 bit direction or register] for arguments.
	*BYTE_SEL is controlled by the CU.
	
=== Microcode === 
512 x 24b ROM
0o000...0o777

address Layout is XXXXYZZZZ where:
X: 4-bit used for encoded opcode.
Y: 0 if argumment is imm, 1 if argument is reg.
Z: 4 bits used for MIC.

Max 16 microinstructions per opcode and imm/reg arg.

=== Instruction layout (Explicitly copied from jdh, see channel in youtube) ===

Instruction layout is XXXXYZZZ where
X: 4-bit instruction identifier (see Instructions section)
Y: 0 if argument is imm(8/16), 1 if argument is reg
Z: 3-bit register identifier of a register (see Registers section)

* instructions with reg: reg arguments have the register, could be SRC or DST, encoded in the
  first three bits of the second instruction byte and the other bits are the same of the first byte.
* For LEA/STR, the Y-bit indicates imm16 (0) and full reg (1). Z-bits are ALWAYS reg.
* Instructions can be 2-3 bytes long
    * PUSH/POP/SHL/SHR use 1 extra byte as padding.
    * LDR/STR/LEA with Y=0 (imm16) are 3 bytes each.
*PUSHF with Y=0 (imm8) doesn't use the register identifier bits.
*PUSH with Y=0 (imm8) doesn't use the register identifier bits.
* Operations that uses SRC as first byte:
	* MOV with REG argument.
	* JNZ with REG argument.
	* LEA with REG argument.
	* STR with IMM and REG argument.
	* PUSHF with REG argument.
	* LDR with REG argument.
	* PUSH with REG argument.

=== Flag register layout ===
Flag register layout is ----LECZ where
C: set to 1 if an operation produces a carry or borrow or overflow (ADD/ADC/SUBB/SUB/SHR/SHL).
Z: set to 1 if the result of the operation is zero.
E: set to 1 if the arguments data are EQUAL.
L: set to 1 if the dst argument data is LESS than src argument data.
-: Not used.

=== RESET ROUTINE ===
The Routine last for 7 clock cycles, the start direction of a program is loaded from
the directions 0x0001 and 0x0002.
* The initialization of SP is responsability of the programmer, could be loaded with LEA instruction.

=== Memory Layout ===
0x0000 to 0xFFEF: General purpose
0xFFF0 to 0xFFFF: *I/O ports

*0xFFF0: Is mapped as tx register for UART.
*0xFFF1: Is mapped as rx register for UART.
*0xFFF2 to 0xFFFF: Is pending to implement, could be used for GPIO registers.

=== UART ===
Doesn't have fifo for rx or tx so it can only receive or sent one 8 bit character, for now is only able to transmit to 9600 baud
with 1 stop bit, 1 start bit and 8 bits for data with no parity bit, maybe the data rate for tx and rx will be configurable later
via special register mapped in memory.

To clear the rx register use the instruction ´STR [0xFFF1], X´ this will set the Rx register to 0x00.

